openapi: 3.0.0
info:
  version: 1.0.0-oas3
  title: CastAway API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: Casting Assistant
  - name: Casting Director
  - name: Executive Producer
paths:
  /actors:
    get:
      tags:
        - Casting Assistant
        - Casting Director
        - Executive Producer
      summary: get all actors
      operationId: get_actors
      description: |
        Returns all actors in the system
      responses:
        '200':
          description: response
          content:
            application/json:
              schema:
                type: object
                properties:
                  actors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Actor'
        '400':
          description: bad input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Casting Director
        - Executive Producer
      summary: create actor
      operationId: create_actor
      description: Adds an actor to the system
      responses:
        '200':
          description: response
          content:
            application/json:
              schema:
                type: object
                properties:
                  actor:
                    $ref: '#/components/schemas/Actor'
        '400':
          description: invalid input, object invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: an existing item already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Actor'
        description: Actor to add
  /actors/{actorId}:
    get:
      tags:
        - Casting Assistant
        - Casting Director
        - Executive Producer
      summary: get actor by id
      operationId: get_actor
      parameters:
        - name: actorId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: response
          content:
            application/json:
              schema:
                type: object
                properties:
                  actor:
                    $ref: '#/components/schemas/Actor'
        '404':
          description: resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Casting Director
        - Executive Producer
      summary: update actor by id
      operationId: update_actor
      parameters:
        - name: actorId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Actor'
      responses:
        '200':
          description: response
          content:
            application/json:
              schema:
                type: object
                properties:
                  actor:
                    $ref: '#/components/schemas/Actor'
        '404':
          description: resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Casting Director
        - Executive Producer
      summary: delete actor by id
      operationId: delete_actor
      parameters:
        - name: actorId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: succesfully deleted
        '404':
          description: resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /movies:
    get:
      tags:
        - Casting Assistant
        - Casting Director
        - Executive Producer
      summary: get all movies
      operationId: get_movies
      description: |
        Returns all movies in the system
      responses:
        '200':
          description: response
          content:
            application/json:
              schema:
                type: object
                properties:
                  movies:
                    type: array
                    items:
                      $ref: '#/components/schemas/Movie'
        '400':
          description: bad input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Executive Producer
      summary: create movie
      operationId: create_movie
      description: Adds a movie to the system
      responses:
        '200':
          description: response
          content:
            application/json:
              schema:
                type: object
                properties:
                  movie:
                    $ref: '#/components/schemas/Movie'
        '400':
          description: invalid input, object invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: an existing item already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/Movie'
        description: Movie to add
  /movies/{movieId}:
    get:
      tags:
        - Casting Assistant
        - Casting Director
        - Executive Producer
      summary: get movie by id
      operationId: get_movie
      parameters:
        - name: movieId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: response
          content:
            application/json:
              schema:
                type: object
                properties:
                  movie:
                    $ref: '#/components/schemas/Movie'
        '404':
          description: resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Casting Director
        - Executive Producer
      summary: update movie by id
      operationId: update_movie
      parameters:
        - name: movieId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
      responses:
        '200':
          description: response
          content:
            application/json:
              schema:
                type: object
                properties:
                  movie:
                    $ref: '#/components/schemas/Movie'
        '404':
          description: resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Executive Producer
      summary: delete movie by id
      operationId: delete_movie
      parameters:
        - name: movieId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: succesfully deleted
        '404':
          description: resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Actor:
      type: object
      required:
        - name
        - age
        - gender
      properties:
        name:
          type: string
          example: Kate Winslet
        age:
          type: integer
          example: 47
        gender:
          type: string
          example: female
    Movie:
      type: object
      required:
        - title
        - releaseDate
      properties:
        title:
          type: string
          example: Titanic
        releaseDate:
          type: string
          format: date-time
          example: '1997-11-01'
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          example: error description
